// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  phoneNumber String @unique
  password    String
  firstName   String
  lastName    String

  dateOfBirth DateTime
  createdAt   DateTime @default(now())

  accounts              Account[]
  addresses             Address[]
  userDocuments         UserDocument[]
  AuthenticationHistory AuthenticationHistory[]
  TransferTemplate      TransferTemplate[]
  Notification          Notification[]
}

model Account {
  id            String        @id @default(uuid())
  accountNumber String        @unique
  userId        String
  type          AccountType
  balance       Float         @default(0.0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  cards         Card[]
  transactions  Transaction[]
}

model Transaction {
  id              String          @id @default(uuid())
  accountId       String
  userId          String
  amount          Float
  transactionType TransactionType
  createdAt       DateTime        @default(now())
  account         Account         @relation(fields: [accountId], references: [id])
}

model Card {
  id             String   @id @default(uuid())
  cardNumber     String   @unique
  expirationDate DateTime
  cvv            String
  cardType       CardType
  accountId      String
  userId         String
  createdAt      DateTime @default(now())
  account        Account  @relation(fields: [accountId], references: [id])
}

model Address {
  id         String @id @default(uuid())
  userId     String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  user       User   @relation(fields: [userId], references: [id])
}

model UserDocument {
  id             String       @id @default(uuid())
  userId         String
  documentType   DocumentType
  documentNumber String
  issuedDate     DateTime
  expirationDate DateTime
  user           User         @relation(fields: [userId], references: [id])
}

model AuthenticationHistory {
  id        String   @id @default(uuid())
  userId    String
  loginTime DateTime @default(now())
  ipAddress String
  device    String
  user      User     @relation(fields: [userId], references: [id])
}

model TransferTemplate {
  id                     String   @id @default(uuid())
  userId                 String
  templateName           String
  recipientName          String
  recipientAccountNumber String
  amount                 Float
  createdAt              DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum AccountType {
  SAVINGS
  CHECKING
  CREDIT
  BUSINESS
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT
}

enum CardType {
  DEBIT
  CREDIT
  VIRTUAL
}

enum DocumentType {
  PASSPORT
  IDENTITY_CARD
  DRIVER_LICENSE
}
